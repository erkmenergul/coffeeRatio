//  SettingsView.swift

import SwiftUI
import UIKit

struct SettingsView: View {
    @EnvironmentObject var settings: SettingsModel
    @EnvironmentObject var recipeStore: CustomRecipeStore
    @State private var showPremiumSheet = false
    @State private var activeAlert: ActiveAlert? = nil

    let unitOptions = ["Metric", "Imperial"]

    var appVersion: String {
        Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "?"
    }

    enum ActiveAlert: Identifiable {
        case confirmDelete
        case emptyWarning

        var id: Int { hashValue }
    }

    var body: some View {
        NavigationView {
            Form {
                // GENEL AYARLAR
                Section(header: Text("Genel Ayarlar")) {
                    Toggle("Karanlƒ±k Mod", isOn: $settings.darkModeEnabled)
                    Toggle("Bildirimler", isOn: $settings.notificationsEnabled)
                }

                // Bƒ∞Rƒ∞M SE√áƒ∞Mƒ∞
                Section(header: Text("Birim")) {
                    HStack {
                        Text("Birim:")
                        Spacer()
                        Picker("", selection: $settings.selectedUnit) {
                            ForEach(unitOptions, id: \.self) { Text($0) }
                        }
                        .pickerStyle(SegmentedPickerStyle())
                    }
                }

                // TARƒ∞FLERƒ∞ Y√ñNET
                Section(header: Text("Tarifleri Y√∂net")) {
                    Button("Kahve Tariflerini Sil") {
                        if recipeStore.recipes.isEmpty {
                            activeAlert = .emptyWarning
                        } else {
                            activeAlert = .confirmDelete
                        }
                    }
                    .foregroundColor(.red)
                }

                // PREMIUM‚ÄôA GE√á
                Section {
                    Button(action: {
                        showPremiumSheet = true
                    }) {
                        HStack {
                            Image(systemName: "star.fill")
                                .foregroundColor(.yellow)
                            Text("Premium‚Äôa Ge√ß")
                                .foregroundColor(.primary)
                        }
                    }
                }

                // GERƒ∞ Bƒ∞LDƒ∞Rƒ∞M
                Section {
                    Button(action: {
                        sendFeedbackEmail()
                    }) {
                        HStack {
                            Image(systemName: "envelope")
                            Text("Geri Bildirim G√∂nderin")
                        }
                    }
                }

                // HAKKINDA ‚Äì EN ALTA TA≈ûINDI
                Section(header: Text("Hakkƒ±nda")) {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Bu uygulama, √ße≈üitli kahve tarifleri ve demleme y√∂ntemlerini √∂ƒürenmenizi,kaydetmenizi saƒülar.")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                        Text("S√ºr√ºm: \(appVersion)")
                            .font(.footnote)
                            .foregroundColor(.secondary)
                            .padding(.top, 4)
                    }
                }
            }
            .navigationTitle("Ayarlar")
            .navigationBarTitleDisplayMode(.inline)

            .alert(item: $activeAlert) { alertType in
                switch alertType {
                case .confirmDelete:
                    return Alert(
                        title: Text("Emin misiniz?"),
                        message: Text("Kendi tariflerinizdeki t√ºm kahve tarifleri silinecek."),
                        primaryButton: .destructive(Text("Sil")) {
                            recipeStore.recipes.removeAll()
                        },
                        secondaryButton: .cancel()
                    )
                case .emptyWarning:
                    return Alert(
                        title: Text("warning"),
                        message: Text("no_recipes_found"),
                        dismissButton: .default(Text("ok"))
                    )
                }
            }

            .sheet(isPresented: $showPremiumSheet) {
                PremiumInfoView()
            }
        }
        .navigationViewStyle(.stack)  // ‚Üê iPad'de split yerine stack modu
    }

    // GERƒ∞ Bƒ∞LDƒ∞Rƒ∞M MAƒ∞Lƒ∞ A√áMA
    private func sendFeedbackEmail() {
        let email = "contactmyappstudio@gmail.com"
        let subject = "CoffeeRatio Geri Bildirim"
        let body = "Merhaba,\n\nUygulama hakkƒ±nda geri bildirimim:\n"

        let encodedSubject = subject.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? ""
        let encodedBody = body.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? ""

        if let url = URL(string: "mailto:\(email)?subject=\(encodedSubject)&body=\(encodedBody)") {
            UIApplication.shared.open(url)
        }
    }
}

struct PremiumInfoView: View {
    @Environment(\.dismiss) var dismiss
    @EnvironmentObject var store: StoreManager

    var body: some View {
        VStack(spacing: 24) {
            Image(systemName: "star.fill")
                .resizable()
                .frame(width: 60, height: 60)
                .foregroundColor(.yellow)
                .padding(.top)

            Text("CoffeeRatio Premium")
                .font(.title)
                .fontWeight(.bold)

            Text("Sƒ±nƒ±rsƒ±z tarif kaydƒ±\nKendi tariflerinizi payla≈üma\nT√ºm gelecekteki premium √∂zelliklere √ºcretsiz eri≈üim")
                .multilineTextAlignment(.center)
                .foregroundColor(.secondary)

            if store.isPurchased {
                Text("Premium Aktif! üéâ")
                    .foregroundColor(.green)
            } else if let product = store.products.first {
                Button("Satƒ±n Al (\(product.displayPrice))") {
                    Task {
                        await store.purchase(product)
                    }
                }
                .buttonStyle(.borderedProminent)

                Button("Satƒ±n Alƒ±mƒ± Geri Y√ºkle") {
                    Task {
                        await store.restore()
                    }
                }
                .padding(.top, 4)
            } else {
                ProgressView("√úr√ºnler Y√ºkleniyor‚Ä¶")
            }

            Button("Kapat") {
                dismiss()
            }
            .padding(.top)
        }
        .padding()
        .alert(isPresented: $store.restoreAlert) {
            Alert(title: Text(store.restoreAlertMessage))
        }
    }
}

struct SettingsView_Previews: PreviewProvider {
    static var previews: some View {
        SettingsView()
            .environmentObject(SettingsModel())
            .environmentObject(CustomRecipeStore())
    }
}
